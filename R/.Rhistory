library(stringr)
#API GET DATA FUNCTION FOR ORCA SURVEYS PROJECT
token <- '2338CA1AE27CE6932A075CF7B7931827'
url <- 'https://redcap.nyu.edu/api/'
get_orca_data <- function(token = token, form = form, raw_v_label = 'raw', form_complete = T) {
if (form_complete) {
record_filter = paste("[", form, "_complete]=2", sep = "")
} else {
record_filter = ""
}
formData <- list(uri = url,
"token"=token,
content='record',
format='csv',
type='flat',
csvDelimiter='',
'fields[0]'='record_id',
'forms[0]'=form,
rawOrLabel=raw_v_label,
rawOrLabelHeaders=raw_v_label,
exportCheckboxLabel='false',
exportSurveyFields='true',
exportDataAccessGroups='false',
returnFormat='csv',
filterLogic=record_filter)
response <- httr::POST(url, body = formData, encode = "form")
df <- httr::content(response)
df[df == -888] = NA
df[df == 888] = NA
df[df == 8888] = NA
df[df == -999] = NA
df[df == 999] = NA
df[df == 9999] = NA # NOTE values can be changed, or new ones added, to account for different missing data flags
df <- dplyr::filter(df, !stringr::str_detect(record_id, "TEST"))
return (df)
}
get_orca_data(token, form="virtual_visit")
#API GET DATA FUNCTION FOR ORCA SURVEYS PROJECT
token <- '2338CA1AE27CE6932A075CF7B7931827'
url <- 'https://redcap.nyu.edu/api/'
#' @title Pulling ORCA Data
#' @description This function retrieves data from a REDCap project using the API.
#' @param token The API token for the project
#' @param form The name of the REDCap form to retrieve data from
#' @param raw_v_label The label for raw data fields
#' @param form_complete Indicating whether you want to return all responses or just ones marked as complete (default is all)
#' @return A data frame with the retrieved data
#' @export
get_orca_data <- function(token = token, form = form, raw_v_label = 'raw', form_complete = T) {
if (form_complete) {
record_filter = paste("[", form, "_complete]=2", sep = "")
} else {
record_filter = ""
}
formData <- list(uri = url,
"token"=token,
content='record',
format='csv',
type='flat',
csvDelimiter='',
'fields[0]'='record_id',
'forms[0]'=form,
rawOrLabel=raw_v_label,
rawOrLabelHeaders=raw_v_label,
exportCheckboxLabel='false',
exportSurveyFields='true',
exportDataAccessGroups='false',
returnFormat='csv',
filterLogic=record_filter)
response <- httr::POST(url, body = formData, encode = "form")
df <- httr::content(response)
df[df == -888] = NA
df[df == 888] = NA
df[df == 8888] = NA
df[df == -999] = NA
df[df == 999] = NA
df[df == 9999] = NA # NOTE values can be changed, or new ones added, to account for different missing data flags
df <- dplyr::filter(df, !stringr::str_detect(record_id, "TEST"))
return (df)
}
nyu <- get_orca_data(token, form="virtual_visit")
token <- '2338CA1AE27CE6932A075CF7B7931827'
library(OrcaData)
data <- get_orca_data(token, form="virtual_visit")
data <- get_orca_data(token, form="virtual_visit")
library(CopeData)
library(CopeData)
token <- 'C76BD298053DC8193843C614C18CF5D1'
data <- get_data(token, form="participant_survey_info_management")
data <- get_data(token, form="new_biospecimen_consent")
data <- get_data(token, form="participant_survey_info_management")
library(CopeData)
token <- 'C76BD298053DC8193843C614C18CF5D1'
data <- get_data(token, form="participant_survey_info_management")
data <- get_data(token, form="participant_survey_info_management", form_complete = F)
View(data)
data <- get_data(token, form="new_biospecimen_consent")
View(data)
data <- data %>%
filter(!str_detect(record_id, "999999"))
library(tidyverse)
data <- data %>%
filter(!str_detect(record_id, "999999"))
data <- data %>%
filter(!str_detect(record_id, "999999")) %>%
select(record_id)
data$record_id <- gsub("-2", "",data$record_id)
twin_token <- 'C76BD298053DC8193843C614C18CF5D1'
cope_token <- 'D4DF5D2839A15994FCEC02E51B81C609'
ripple <- get_data(cope_token, form="ripple_tracking_information", form_complete = T)
View(ripple)
consented_to_twin <- data %>%
left_join(ripple, by="record_id")
View(consented_to_twin)
is_a_twin <- get_field(cope_token, field = "survey_twins")
rlang::last_trace()
is_a_twin <- get_field(cope_token, field = "survey_twin")
View(is_a_twin)
is_a_twin <- get_data(cope_token, form = "participant_info_survey_management", form_complete = F)
View(is_a_twin)
is_a_twin <- is_a_twin %>%
filter(redcap_event_name == "covid_arm_1") %>%
select(record_id, survey_twin)
View(is_a_twin)
