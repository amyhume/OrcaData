theme(plot.title = element_text(hjust = 0.5, color="#3C1939", face="bold", size=30),
axis.ticks=element_blank(),
panel.background=element_rect(fill="white"),
plot.background = element_rect(fill="white"),
panel.border=element_blank(),
panel.grid=element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
legend.position = "none",
axis.title.x.bottom = element_text(color="#3C1939", face="bold", size=20),
axis.text.x.bottom = element_text(color="#3C1939", face="bold", size=20),
axis.title.y.left = element_blank(),
axis.text.y.left = element_text(color="#3C1939", face="bold", size=20)) +
labs(title = "Race",x="Percentage")
race_graph
library(tidyverse)
data <- read.csv("final_dataset.csv", na.strings="")
#dataset with IBI outliers of -150+ and 200+ removed (mom)
data <- data %>%
filter(mom_hrr > -150 & mom_hrr < 200)
#now removing infant outliers of < -100 and > 100
data <- data %>%
filter(IBI_rest_SF_infant > -100 & IBI_rest_SF_infant < 100)
ihr_alpha_scatter <- data %>%
ggplot(aes(x=IBI_rest_SF_infant, y=Frontal_LowAlpha_relative_3)) +
geom_point(color = "#51C2D0", size = 5, alpha = 0.9)+
geom_smooth(method=lm, color = "#51C2D0", fill = "#51C2D0") +
theme(panel.background = element_rect(fill="white"),
panel.border=element_rect(color="#3C1939", fill=NA, linewidth=1.3),
axis.ticks = element_blank(),
axis.title = element_text(colour="#3C1939", size=24, face = "bold", family = "Arial"),
axis.text = element_text(colour = "#3C1939", size=20, face = "bold", family = "Arial"))+
labs(x="Change in Infant IBI During Still Face", y="Infant Frontal EEG Activity")
ihr_alpha_scatter
synch_alpha_scatter <- data %>%
ggplot(aes(x=Correlation_SF, y=Frontal_LowAlpha_relative_3)) +
geom_point(color = "#51C2D0", size = 5, alpha = 0.9)+
geom_smooth(method=lm, color = "#51C2D0", fill = "#51C2D0") +
theme(panel.background = element_rect(fill="white"),
panel.border=element_rect(color="#3C1939", fill=NA, linewidth =1.3),
axis.ticks = element_blank(),
axis.title = element_text(colour="#3C1939", size=24, face = "bold", family = "Arial"),
axis.text = element_text(colour = "#3C1939", size=20, face = "bold", family = "Arial")) +
labs(x="Mother-Infant HRS during Still Face", y="Infant Frontal EEG Activity")
synch_alpha_scatter
interaction_scatter <- data %>%
ggplot(aes(x=IBI_rest_SF_infant, y=Frontal_LowAlpha_relative_3, fill = as.factor(synchrony_level), color = as.factor(synchrony_level))) +
geom_point(size = 5, alpha=0.9) +
geom_smooth(method=lm) +
scale_fill_manual(values = c("#ae71de", "#51C2D0")) +
scale_color_manual(values = c("#ae71de", "#51C2D0")) +
theme(panel.background = element_rect(fill="white"),
panel.border=element_rect(color="#3C1939", fill=NA, linewidth=1.3),
axis.ticks = element_blank(),
axis.title = element_text(colour="#3C1939", size=24, family = "Arial", face="bold"),
axis.text = element_text(colour = "#3C1939", size=20, family = "Arial", face="bold"),
legend.position = "none") +
labs(x = "Change in Infant IBI during SF", y="Infant Frontal EEG Activity")
interaction_scatter
synchrony_alpha <- lm(Frontal_LowAlpha_relative_3 ~ Correlation_SF + child_age, data=data)
summary(synchrony_alpha)
ihr_alpha <- lm(Frontal_LowAlpha_relative_3 ~ IBI_rest_SF_infant + child_age + child_sex, data=data)
summary(ihr_alpha)
interaction_scatter <- data %>%
ggplot(aes(x=IBI_rest_SF_infant, y=Frontal_LowAlpha_relative_3, fill = as.factor(synchrony_level), color = as.factor(synchrony_level))) +
geom_point(size = 5, alpha=0.9) +
geom_smooth(method=lm) +
scale_fill_manual(values = c("#ae71de", "#51C2D0")) +
scale_color_manual(values = c("#ae71de", "#51C2D0")) +
theme(panel.background = element_rect(fill="white"),
panel.border=element_rect(color="#3C1939", fill=NA, linewidth=1.3),
axis.ticks = element_blank(),
axis.title = element_text(colour="#3C1939", size=24, family = "Arial", face="bold"),
axis.text = element_text(colour = "#3C1939", size=20, family = "Arial", face="bold"),
legend.position = "none") +
labs(x = "Change in Infant IBI during SF", y="Infant Frontal EEG Activity")
interaction_scatter
setwd("/Volumes/ISLAND/User_Folders/Amy_Hume/2023")
data <- read.csv("final_dataset.csv", na.strings = "")
setwd("/Volumes/ISLAND-1/User_Folders/Amy_Hume/2023")
data <- read.csv("final_dataset.csv", na.strings = "")
#dataset with IBI outliers of -150+ and 200+ removed (mom)
data <- data %>%
filter(mom_hrr > -150 & mom_hrr < 200)
#now removing infant outliers of < -100 and > 100
data <- data %>%
filter(IBI_rest_SF_infant > -100 & IBI_rest_SF_infant < 100)
#race graph ----
data$cg_race_cat <- gsub("Other", "Two or More", data$cg_race_cat)
tmp = data %>%
filter(!is.na(cg_race_cat)) %>%
group_by(cg_race_cat) %>%
count() %>%
ungroup()%>%
arrange(desc(cg_race_cat)) %>%
mutate(percentage = round(n/sum(n),4)*100,
lab.pos = cumsum(percentage)-.5*percentage,
cnt = sum(n))
mycolors_b <- c("#3c1939", "#783274", "#935b90", "#ae84ac", "#c9adc7" )
race_graph <- tmp %>%
filter(!is.na(cg_race_cat)) %>%
ggplot(aes(x = percentage, y = as.factor(cg_race_cat), fill = as.factor(cg_race_cat)))+
geom_bar(stat = "identity", width = .8, lwd = .15)+
scale_fill_manual(values = mycolors_b) +
theme(plot.title = element_text(hjust = 0.5, color="#3C1939", face="bold", size=30),
axis.ticks=element_blank(),
panel.background=element_rect(fill="white"),
plot.background = element_rect(fill="white"),
panel.border=element_blank(),
panel.grid=element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
legend.position = "none",
axis.title.x.bottom = element_text(color="#3C1939", face="bold", size=20),
axis.text.x.bottom = element_text(color="#3C1939", face="bold", size=20),
axis.title.y.left = element_blank(),
axis.text.y.left = element_text(color="#3C1939", face="bold", size=20)) +
labs(title = "Race",x="Percentage")
race_graph
setwd("/Volumes/ISLAND-1/User_Folders/Amy_Hume/2023")
library(tidyverse)
library(psych)
setwd("/Volumes/ISLAND/User_Folders/Amy_Hume/2023")
data <- read.csv("final_dataset.csv", na.strings = "")
options(scipen = 999)
#dataset with IBI outliers of -150+ and 200+ removed (mom)
data <- data %>%
filter(mom_hrr > -150 & mom_hrr < 200)
#now removing infant outliers of < -100 and > 100
data <- data %>%
filter(IBI_rest_SF_infant > -100 & IBI_rest_SF_infant < 100)
View(data)
ihr_beta <- lm(Frontal_LowBeta_relative_3 ~ IBI_rest_SF_infant + child_age + child_sex, data=data)
summary(ihr_beta)
synchrony_beta <- lm(Frontal_LowBeta_relative_3 ~ Correlation_SF + child_age, data=data)
summary(synchrony_beta)
ihr_beta <- lm(Frontal_LowBeta_relative_3 ~ IBI_rest_SF_infant + child_age, data=data)
summary(ihr_beta)
+ child_sex
+ child_sex
ihr_beta <- lm(Frontal_Theta_relative_3 ~ IBI_rest_SF_infant + child_age + child_sex, data=data)
summary(ihr_beta)
synchrony_beta <- lm(Frontal_Theta_relative_3 ~ Correlation_SF + child_age, data=data)
summary(synchrony_beta)
token <- '2338CA1AE27CE6932A075CF7B7931827'
library(OrcaData)
data <- get_orca_epds(token)
View(data)
epds = get_orca_data(token, "epds", form_complete = T)
View(data)
get_orca_data(token, form = 'epds', form_complete = F)
View(epds)
get_orca_epds <- function(token, timepoint = 'orca_visit_1_arm_1') {
epds = get_orca_data(token, "epds", form_complete = T)
epds <- dplyr::filter(epds, redcap_event_name == timepoint)
epds$epds_1_v2 = 3 - epds$epds_1_v2
epds$epds_2_v2 = 3 - epds$epds_2_v2
epds$epds_all = epds$epds_1_v2 + epds$epds_2_v2 + epds$epds_3_v2 + epds$epds_4_v2 + epds$epds_5_v2 +
epds$epds_6_v2 + epds$epds_7_v2 + epds$epds_8_v2 + epds$epds_9_v2 + epds$epds_10_v2
epds$epds_dep = epds$epds_1_v2 + epds$epds_2_v2 + epds$epds_3_v2 +
epds$epds_7_v2 + epds$epds_8_v2 + epds$epds_9_v2 + epds$epds_10_v2
epds$epds_anx = epds$epds_4_v2 + epds$epds_5_v2 + epds$epds_6_v2
#epds$epds_avg = rowSums(epds[,5:14], na.rm=T)
epds = epds[,c("record_id", "epds_all", "epds_dep", "epds_anx")]
return (epds)
}
data_new <- get_orca_epds(token, timepoint = 'orca_visit_2_arm_1')
View(data_new)
View(data_new)
get_orca_data <- function(token = token, form = form, raw_v_label = 'raw', form_complete = T) {
if (form_complete) {
record_filter = paste("[", form, "_complete]=2", sep = "")
} else {
record_filter = ""
}
formData <- list(uri = url,
"token"=token,
content='record',
format='csv',
type='flat',
csvDelimiter='',
'fields[0]'='record_id',
'forms[0]'=form,
rawOrLabel=raw_v_label,
rawOrLabelHeaders=raw_v_label,
exportCheckboxLabel='false',
exportSurveyFields='true',
exportDataAccessGroups='false',
returnFormat='csv',
filterLogic=record_filter)
response <- httr::POST(url, body = formData, encode = "form")
df <- httr::content(response)
df[df == -888] = NA
df[df == 888] = NA
df[df == 8888] = NA
df[df == -999] = NA
df[df == 999] = NA
df[df == 9999] = NA # NOTE values can be changed, or new ones added, to account for different missing data flags
df <- dplyr::filter(df, !str_detect(record_id, "TEST"))
return (df)
}
data_new <- get_orca_epds(token, timepoint = 'orca_visit_2_arm_1')
get_orca_data <- function(token = token, form = form, raw_v_label = 'raw', form_complete = T) {
if (form_complete) {
record_filter = paste("[", form, "_complete]=2", sep = "")
} else {
record_filter = ""
}
formData <- list(uri = url,
"token"=token,
content='record',
format='csv',
type='flat',
csvDelimiter='',
'fields[0]'='record_id',
'forms[0]'=form,
rawOrLabel=raw_v_label,
rawOrLabelHeaders=raw_v_label,
exportCheckboxLabel='false',
exportSurveyFields='true',
exportDataAccessGroups='false',
returnFormat='csv',
filterLogic=record_filter)
response <- httr::POST(url, body = formData, encode = "form")
df <- httr::content(response)
df[df == -888] = NA
df[df == 888] = NA
df[df == 8888] = NA
df[df == -999] = NA
df[df == 999] = NA
df[df == 9999] = NA # NOTE values can be changed, or new ones added, to account for different missing data flags
df <- dplyr::filter(df, !str_detect(record_id, "TEST"))
return (df)
}
get_orca_epds <- function(token, timepoint = 'orca_visit_1_arm_1') {
epds = get_orca_data(token, "epds", form_complete = T)
epds <- dplyr::filter(epds, redcap_event_name == timepoint)
epds$epds_1_v2 = 3 - epds$epds_1_v2
epds$epds_2_v2 = 3 - epds$epds_2_v2
epds$epds_all = epds$epds_1_v2 + epds$epds_2_v2 + epds$epds_3_v2 + epds$epds_4_v2 + epds$epds_5_v2 +
epds$epds_6_v2 + epds$epds_7_v2 + epds$epds_8_v2 + epds$epds_9_v2 + epds$epds_10_v2
epds$epds_dep = epds$epds_1_v2 + epds$epds_2_v2 + epds$epds_3_v2 +
epds$epds_7_v2 + epds$epds_8_v2 + epds$epds_9_v2 + epds$epds_10_v2
epds$epds_anx = epds$epds_4_v2 + epds$epds_5_v2 + epds$epds_6_v2
#epds$epds_avg = rowSums(epds[,5:14], na.rm=T)
epds = epds[,c("record_id", "epds_all", "epds_dep", "epds_anx")]
return (epds)
}
data_new <- get_orca_epds(token, timepoint = 'orca_visit_2_arm_1')
get_orca_data <- function(token = token, form = form, raw_v_label = 'raw', form_complete = T) {
if (form_complete) {
record_filter = paste("[", form, "_complete]=2", sep = "")
} else {
record_filter = ""
}
formData <- list(uri = url,
"token"=token,
content='record',
format='csv',
type='flat',
csvDelimiter='',
'fields[0]'='record_id',
'forms[0]'=form,
rawOrLabel=raw_v_label,
rawOrLabelHeaders=raw_v_label,
exportCheckboxLabel='false',
exportSurveyFields='true',
exportDataAccessGroups='false',
returnFormat='csv',
filterLogic=record_filter)
response <- httr::POST(url, body = formData, encode = "form")
df <- httr::content(response)
df[df == -888] = NA
df[df == 888] = NA
df[df == 8888] = NA
df[df == -999] = NA
df[df == 999] = NA
df[df == 9999] = NA # NOTE values can be changed, or new ones added, to account for different missing data flags
return (df)
}
#API GET DATA FUNCTION FOR ORCA SURVEYS PROJECT
url <- 'https://redcap.nyu.edu/api/'
#' @title Pulling ORCA Data
#' @description This function retrieves data from a REDCap project using the API.
#' @param token The API token for the project
#' @param form The name of the REDCap form to retrieve data from
#' @param raw_v_label The label for raw data fields
#' @param form_complete Indicating whether you want to return all responses or just ones marked as complete (default is all)
#' @return A data frame with the retrieved data
#' @export
get_orca_data <- function(token = token, form = form, raw_v_label = 'raw', form_complete = T) {
if (form_complete) {
record_filter = paste("[", form, "_complete]=2", sep = "")
} else {
record_filter = ""
}
formData <- list(uri = url,
"token"=token,
content='record',
format='csv',
type='flat',
csvDelimiter='',
'fields[0]'='record_id',
'forms[0]'=form,
rawOrLabel=raw_v_label,
rawOrLabelHeaders=raw_v_label,
exportCheckboxLabel='false',
exportSurveyFields='true',
exportDataAccessGroups='false',
returnFormat='csv',
filterLogic=record_filter)
response <- httr::POST(url, body = formData, encode = "form")
df <- httr::content(response)
df[df == -888] = NA
df[df == 888] = NA
df[df == 8888] = NA
df[df == -999] = NA
df[df == 999] = NA
df[df == 9999] = NA # NOTE values can be changed, or new ones added, to account for different missing data flags
df <- dplyr::filter(df, !str_detect(record_id, "TEST"))
return (df)
}
data_new <- get_orca_epds(token, timepoint = 'orca_visit_2_arm_1')
get_orca_data <- function(token = token, form = form, raw_v_label = 'raw', form_complete = T) {
if (form_complete) {
record_filter = paste("[", form, "_complete]=2", sep = "")
} else {
record_filter = ""
}
formData <- list(uri = url,
"token"=token,
content='record',
format='csv',
type='flat',
csvDelimiter='',
'fields[0]'='record_id',
'forms[0]'=form,
rawOrLabel=raw_v_label,
rawOrLabelHeaders=raw_v_label,
exportCheckboxLabel='false',
exportSurveyFields='true',
exportDataAccessGroups='false',
returnFormat='csv',
filterLogic=record_filter)
response <- httr::POST(url, body = formData, encode = "form")
df <- httr::content(response)
df[df == -888] = NA
df[df == 888] = NA
df[df == 8888] = NA
df[df == -999] = NA
df[df == 999] = NA
df[df == 9999] = NA # NOTE values can be changed, or new ones added, to account for different missing data flags
df <- dplyr::filter(df, !stringr::str_detect(record_id, "TEST"))
return (df)
}
data_new <- get_orca_epds(token, timepoint = 'orca_visit_2_arm_1')
View(data_new)
get_orca_field <- function(token = token, field=field, raw_v_label = 'raw') {
formData <- list(uri = url,
"token"=token,
content='record',
format='csv',
type='flat',
csvDelimiter='',
'fields[0]'='record_id',
'fields[1]' = field,
rawOrLabel=raw_v_label,
rawOrLabelHeaders=raw_v_label,
exportCheckboxLabel='false',
exportSurveyFields='false',
exportDataAccessGroups='false',
returnFormat='csv')
response <- httr::POST(url, body = formData, encode = "form")
df <- httr::content(response)
df[df == -888] = NA
df[df == 888] = NA
df[df == 8888] = NA
df[df == -999] = NA
df[df == 999] = NA
df[df == 9999] = NA
df <- dplyr::select(df, record_id, field)
df <- df[!is.na(df[[field]]),]
df <- dplyr::filter(df, !stringr::str_detect(record_id, "TEST"))
return (df)
}
data <- get_orca_field(token, field='email')
View(data)
View(data)
get_orca_field <- function(token = token, field=field, raw_v_label = 'raw') {
formData <- list(uri = url,
"token"=token,
content='record',
format='csv',
type='flat',
csvDelimiter='',
'fields[0]'='record_id',
'fields[1]' = field,
rawOrLabel=raw_v_label,
rawOrLabelHeaders=raw_v_label,
exportCheckboxLabel='false',
exportSurveyFields='false',
exportDataAccessGroups='false',
returnFormat='csv')
response <- httr::POST(url, body = formData, encode = "form")
df <- httr::content(response)
df[df == -888] = NA
df[df == 888] = NA
df[df == 8888] = NA
df[df == -999] = NA
df[df == 999] = NA
df[df == 9999] = NA
df <- dplyr::select(df, record_id, redcap_event_name field)
#' @title Pulling ORCA Field
#' @description PULLS RECORD ID AND INDIVIDUAL FIELD
#' @param token Unique REDCap token ID
#' @param field Name of the specific field to be downloaded
#' @param raw_v_label Whether raw data or labels are requested
#' @return A data frame for the completed record_ids, redcap_event_name and field
#' @export
get_orca_field <- function(token = token, field=field, raw_v_label = 'raw') {
formData <- list(uri = url,
"token"=token,
content='record',
format='csv',
type='flat',
csvDelimiter='',
'fields[0]'='record_id',
'fields[1]' = field,
rawOrLabel=raw_v_label,
rawOrLabelHeaders=raw_v_label,
exportCheckboxLabel='false',
exportSurveyFields='false',
exportDataAccessGroups='false',
returnFormat='csv')
response <- httr::POST(url, body = formData, encode = "form")
df <- httr::content(response)
df[df == -888] = NA
df[df == 888] = NA
df[df == 8888] = NA
df[df == -999] = NA
df[df == 999] = NA
df[df == 9999] = NA
df <- dplyr::select(df, record_id, redcap_event_name, field)
df <- df[!is.na(df[[field]]),]
df <- dplyr::filter(df, !stringr::str_detect(record_id, "TEST"))
return (df)
}
data <- get_orca_field(token, field='email')
View(data)
setwd("/Users/amyhume/OrcaData/R")
roxygen2::roxygenise()
setwd("/Users/amyhume/OrcaData")
roxygen2::roxygenise()
warnings()
roxygen2::roxygenize()
install.packages("roxygen2")
install.packages("roxygen2")
roxygen2::roxygenize()
warnings()
roxygen2::roxygenize()
warnings()
# List all .Rd files in your package
rd_files <- list.files("man/", pattern = "\\.Rd$", full.names = TRUE)
print(rd_files)
comment_header <- c(
"% Generated by roxygen2: do not edit by hand",
"% Please edit documentation in R/CopeData.R"
)
# Loop through each .Rd file and prepend the comment header
for (rd_file in rd_files) {
lines <- readLines(rd_file)
new_lines <- c(comment_header, "", lines)
writeLines(new_lines, rd_file)
}
roxygen2::roxygenize()
rm(list = c("get_orca_data", "get_orca_epds", "get_orca_field"))
demo1 <- get_orca_data(token, form='sociodemographic', form_complete = T)
demo1 <- dplyr::select(demo1, record_id, sociodemographic_timestamp, child_dob:socio_comments)
demo1 <- replace_multiple(demo1, "caregiver_ed", old_values = c(1,2,3,4,5), new_values = c("less than hs", "high school degree/ged","partial college", "bachelor's degree", "graduate degree"))
demo1 <- replace_multiple(demo1, "marital_status", old_values = c(1,2,3,4,5,6,7), new_values = c("married", "single living together", "single never married", "separated", "divorced", "widowed", "other"))
View(demo1)
demo2 <- get_orca_data(token, form="sociodemographic_follow_up", form_complete = T)
View(demo2)
ss <- get_orca_data(token, "social_support", form_complete = T)
View(ss)
get_orca_social_support <- function(token, timepoint = 'orca_visit_1_arm_1') {
ss <- get_orca_data(token, "social_support", form_complete = T)
ss <- dplyr::filter(ss, redcap_event_name == timepoint)
ss_columns <- dplyr::select(ss, support3:support10)
ss$social_support <- rowSums(ss_columns)
ss <- dplyr::select(ss, record_id, social_support)
return (ss)
}
ss <- get_orca_social_support(token, timepoint = 'orca_visit_2_arm_1')
View(ss)
ss <- get_orca_data(token, "social_support", form_complete = T)
View(ss)
get_orca_social_support <- function(token, timepoint = 'orca_visit_1_arm_1') {
ss <- get_orca_data(token, "social_support", form_complete = T)
ss <- dplyr::filter(ss, redcap_event_name == timepoint)
ss_columns <- dplyr::select(ss, support3:support10)
ss$social_support <- rowSums(ss_columns, na.rm=T)
ss <- dplyr::select(ss, record_id, social_support)
return (ss)
}
ss <- get_orca_social_support(token, timepoint = 'orca_visit_2_arm_1')
View(ss)
contact <- get_orca_data(token, form="contact_info", form_complete = T)
View(contact)
roxygen2::roxygenize()
rm(list = c("get_orca_social_support"))
roxygen2::roxygenize()
